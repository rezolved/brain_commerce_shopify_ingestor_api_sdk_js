/**
 * Brain Commerce Shopify Ingestor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Faq model module.
 * @module model/Faq
 * @version 0.2.0
 */
class Faq {
    /**
     * Constructs a new <code>Faq</code>.
     * @alias module:model/Faq
     * @param question {String} 
     * @param answer {String} 
     * @param text {String} 
     */
    constructor(question, answer, text) { 
        
        Faq.initialize(this, question, answer, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, question, answer, text) { 
        obj['question'] = question;
        obj['answer'] = answer;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>Faq</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Faq} obj Optional instance to populate.
     * @return {module:model/Faq} The populated <code>Faq</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Faq();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
            if (data.hasOwnProperty('answer')) {
                obj['answer'] = ApiClient.convertToType(data['answer'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('internal_id')) {
                obj['internal_id'] = ApiClient.convertToType(data['internal_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Faq</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Faq</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Faq.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }
        // ensure the json data is a string
        if (data['answer'] && !(typeof data['answer'] === 'string' || data['answer'] instanceof String)) {
            throw new Error("Expected the field `answer` to be a primitive type in the JSON string but got " + data['answer']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

Faq.RequiredProperties = ["question", "answer", "text"];

/**
 * @member {String} uuid
 */
Faq.prototype['uuid'] = undefined;

/**
 * @member {String} question
 */
Faq.prototype['question'] = undefined;

/**
 * @member {String} answer
 */
Faq.prototype['answer'] = undefined;

/**
 * @member {String} text
 */
Faq.prototype['text'] = undefined;

/**
 * @member {Number} internal_id
 */
Faq.prototype['internal_id'] = undefined;






export default Faq;

