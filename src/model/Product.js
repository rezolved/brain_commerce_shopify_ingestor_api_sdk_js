/**
 * Brain Commerce Shopify Ingestor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductAvailability from './ProductAvailability';

/**
 * The Product model module.
 * @module model/Product
 * @version 0.2.0
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * @alias module:model/Product
     * @param sku {String} 
     * @param availability {module:model/ProductAvailability} 
     * @param currency {String} 
     */
    constructor(sku, availability, currency) { 
        
        Product.initialize(this, sku, availability, currency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sku, availability, currency) { 
        obj['sku'] = sku;
        obj['product_category'] = '';
        obj['availability'] = availability;
        obj['price'] = 0;
        obj['currency'] = currency;
        obj['item_group_id'] = '';
        obj['title'] = '';
        obj['description'] = '';
        obj['gender'] = '';
        obj['image_link'] = '';
        obj['material'] = '';
        obj['pattern'] = '';
        obj['product_weight'] = 0;
        obj['size'] = '';
        obj['color'] = '';
        obj['system_link'] = '';
        obj['link'] = '';
        obj['brand'] = '';
        obj['model'] = '';
        obj['gtin'] = '';
        obj['condition'] = '';
        obj['adult'] = '';
        obj['review_summaries'] = '';
        obj['average_rating'] = 0;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('sku_id')) {
                obj['sku_id'] = ApiClient.convertToType(data['sku_id'], 'String');
            }
            if (data.hasOwnProperty('product_category')) {
                obj['product_category'] = ApiClient.convertToType(data['product_category'], 'String');
            }
            if (data.hasOwnProperty('internal_id')) {
                obj['internal_id'] = ApiClient.convertToType(data['internal_id'], 'Number');
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ProductAvailability.constructFromObject(data['availability']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('item_group_id')) {
                obj['item_group_id'] = ApiClient.convertToType(data['item_group_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('image_link')) {
                obj['image_link'] = ApiClient.convertToType(data['image_link'], 'String');
            }
            if (data.hasOwnProperty('material')) {
                obj['material'] = ApiClient.convertToType(data['material'], 'String');
            }
            if (data.hasOwnProperty('pattern')) {
                obj['pattern'] = ApiClient.convertToType(data['pattern'], 'String');
            }
            if (data.hasOwnProperty('product_weight')) {
                obj['product_weight'] = ApiClient.convertToType(data['product_weight'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('system_link')) {
                obj['system_link'] = ApiClient.convertToType(data['system_link'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('gtin')) {
                obj['gtin'] = ApiClient.convertToType(data['gtin'], 'String');
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('adult')) {
                obj['adult'] = ApiClient.convertToType(data['adult'], 'String');
            }
            if (data.hasOwnProperty('review_summaries')) {
                obj['review_summaries'] = ApiClient.convertToType(data['review_summaries'], 'String');
            }
            if (data.hasOwnProperty('average_rating')) {
                obj['average_rating'] = ApiClient.convertToType(data['average_rating'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Product.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['sku_id'] && !(typeof data['sku_id'] === 'string' || data['sku_id'] instanceof String)) {
            throw new Error("Expected the field `sku_id` to be a primitive type in the JSON string but got " + data['sku_id']);
        }
        // ensure the json data is a string
        if (data['product_category'] && !(typeof data['product_category'] === 'string' || data['product_category'] instanceof String)) {
            throw new Error("Expected the field `product_category` to be a primitive type in the JSON string but got " + data['product_category']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['item_group_id'] && !(typeof data['item_group_id'] === 'string' || data['item_group_id'] instanceof String)) {
            throw new Error("Expected the field `item_group_id` to be a primitive type in the JSON string but got " + data['item_group_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['image_link'] && !(typeof data['image_link'] === 'string' || data['image_link'] instanceof String)) {
            throw new Error("Expected the field `image_link` to be a primitive type in the JSON string but got " + data['image_link']);
        }
        // ensure the json data is a string
        if (data['material'] && !(typeof data['material'] === 'string' || data['material'] instanceof String)) {
            throw new Error("Expected the field `material` to be a primitive type in the JSON string but got " + data['material']);
        }
        // ensure the json data is a string
        if (data['pattern'] && !(typeof data['pattern'] === 'string' || data['pattern'] instanceof String)) {
            throw new Error("Expected the field `pattern` to be a primitive type in the JSON string but got " + data['pattern']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['system_link'] && !(typeof data['system_link'] === 'string' || data['system_link'] instanceof String)) {
            throw new Error("Expected the field `system_link` to be a primitive type in the JSON string but got " + data['system_link']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['gtin'] && !(typeof data['gtin'] === 'string' || data['gtin'] instanceof String)) {
            throw new Error("Expected the field `gtin` to be a primitive type in the JSON string but got " + data['gtin']);
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // ensure the json data is a string
        if (data['adult'] && !(typeof data['adult'] === 'string' || data['adult'] instanceof String)) {
            throw new Error("Expected the field `adult` to be a primitive type in the JSON string but got " + data['adult']);
        }
        // ensure the json data is a string
        if (data['review_summaries'] && !(typeof data['review_summaries'] === 'string' || data['review_summaries'] instanceof String)) {
            throw new Error("Expected the field `review_summaries` to be a primitive type in the JSON string but got " + data['review_summaries']);
        }

        return true;
    }


}

Product.RequiredProperties = ["sku", "availability", "currency"];

/**
 * @member {String} uuid
 */
Product.prototype['uuid'] = undefined;

/**
 * @member {String} sku
 */
Product.prototype['sku'] = undefined;

/**
 * @member {String} sku_id
 */
Product.prototype['sku_id'] = undefined;

/**
 * @member {String} product_category
 * @default ''
 */
Product.prototype['product_category'] = '';

/**
 * @member {Number} internal_id
 */
Product.prototype['internal_id'] = undefined;

/**
 * @member {module:model/ProductAvailability} availability
 */
Product.prototype['availability'] = undefined;

/**
 * @member {Number} price
 * @default 0
 */
Product.prototype['price'] = 0;

/**
 * @member {String} currency
 */
Product.prototype['currency'] = undefined;

/**
 * @member {String} item_group_id
 * @default ''
 */
Product.prototype['item_group_id'] = '';

/**
 * @member {String} title
 * @default ''
 */
Product.prototype['title'] = '';

/**
 * @member {String} description
 * @default ''
 */
Product.prototype['description'] = '';

/**
 * @member {String} gender
 * @default ''
 */
Product.prototype['gender'] = '';

/**
 * @member {String} image_link
 * @default ''
 */
Product.prototype['image_link'] = '';

/**
 * @member {String} material
 * @default ''
 */
Product.prototype['material'] = '';

/**
 * @member {String} pattern
 * @default ''
 */
Product.prototype['pattern'] = '';

/**
 * @member {Number} product_weight
 * @default 0
 */
Product.prototype['product_weight'] = 0;

/**
 * @member {String} size
 * @default ''
 */
Product.prototype['size'] = '';

/**
 * @member {String} color
 * @default ''
 */
Product.prototype['color'] = '';

/**
 * @member {String} system_link
 * @default ''
 */
Product.prototype['system_link'] = '';

/**
 * @member {String} link
 * @default ''
 */
Product.prototype['link'] = '';

/**
 * @member {String} brand
 * @default ''
 */
Product.prototype['brand'] = '';

/**
 * @member {String} model
 * @default ''
 */
Product.prototype['model'] = '';

/**
 * @member {String} gtin
 * @default ''
 */
Product.prototype['gtin'] = '';

/**
 * @member {String} condition
 * @default ''
 */
Product.prototype['condition'] = '';

/**
 * @member {String} adult
 * @default ''
 */
Product.prototype['adult'] = '';

/**
 * @member {String} review_summaries
 * @default ''
 */
Product.prototype['review_summaries'] = '';

/**
 * @member {Number} average_rating
 * @default 0
 */
Product.prototype['average_rating'] = 0;






export default Product;

