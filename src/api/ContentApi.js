/**
 * Brain Commerce Shopify Ingestor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Content from '../model/Content';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Content service.
* @module api/ContentApi
* @version 0.2.0
*/
export default class ContentApi {

    /**
    * Constructs a new ContentApi. 
    * @alias module:api/ContentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Content By Title
     * Create content by title
     * @param {String} title 
     * @param {module:model/Content} content 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Content} and HTTP response
     */
    createContentByTitleWithHttpInfo(title, content) {
      let postBody = content;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling createContentByTitle");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling createContentByTitle");
      }

      let pathParams = {
        'title': title
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Content;
      return this.apiClient.callApi(
        '/v1/content/{title}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Content By Title
     * Create content by title
     * @param {String} title 
     * @param {module:model/Content} content 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Content}
     */
    createContentByTitle(title, content) {
      return this.createContentByTitleWithHttpInfo(title, content)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Content Collection
     * Creates content collection/schema in Weaviate database
     * @param {Object} opts Optional parameters
     * @param {Boolean} [delete_existing_collection = false)] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createContentCollectionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'delete_existing_collection': opts['delete_existing_collection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/content/collection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Content Collection
     * Creates content collection/schema in Weaviate database
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.delete_existing_collection  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createContentCollection(opts) {
      return this.createContentCollectionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Content By Internal Id
     * Delete content by internal_id
     * @param {Number} internal_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteContentByInternalIdWithHttpInfo(internal_id) {
      let postBody = null;
      // verify the required parameter 'internal_id' is set
      if (internal_id === undefined || internal_id === null) {
        throw new Error("Missing the required parameter 'internal_id' when calling deleteContentByInternalId");
      }

      let pathParams = {
        'internal_id': internal_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/content/by-internal-id/{internal_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Content By Internal Id
     * Delete content by internal_id
     * @param {Number} internal_id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteContentByInternalId(internal_id) {
      return this.deleteContentByInternalIdWithHttpInfo(internal_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Content By Title
     * Delete content by title
     * @param {String} title 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteContentByTitleWithHttpInfo(title) {
      let postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling deleteContentByTitle");
      }

      let pathParams = {
        'title': title
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/content/{title}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Content By Title
     * Delete content by title
     * @param {String} title 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteContentByTitle(title) {
      return this.deleteContentByTitleWithHttpInfo(title)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Content Collection
     * Delete content collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    deleteContentCollectionWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/content/collection', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Content Collection
     * Delete content collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    deleteContentCollection() {
      return this.deleteContentCollectionWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Contents
     * Returns All contents. If collection has a large number of contentss, response may take long time
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Content>} and HTTP response
     */
    getAllContentsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Content];
      return this.apiClient.callApi(
        '/v1/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get All Contents
     * Returns All contents. If collection has a large number of contentss, response may take long time
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Content>}
     */
    getAllContents() {
      return this.getAllContentsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gest Content By Title
     * Get content by title
     * @param {String} title 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Content} and HTTP response
     */
    getContentByTitleWithHttpInfo(title) {
      let postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling getContentByTitle");
      }

      let pathParams = {
        'title': title
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Content;
      return this.apiClient.callApi(
        '/v1/content/{title}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gest Content By Title
     * Get content by title
     * @param {String} title 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Content}
     */
    getContentByTitle(title) {
      return this.getContentByTitleWithHttpInfo(title)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check If Content Collection Exists.
     * Returns true if content collection exists else return false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getContentCollectionExistsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/content/collection-exists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check If Content Collection Exists.
     * Returns true if content collection exists else return false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getContentCollectionExists() {
      return this.getContentCollectionExistsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import Multiple Contents
     * Import multiple Contents. If a content same title already exist, it is updated. Otherwise new content is created
     * @param {Array.<module:model/Content>} content 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    importMultipleContentsWithHttpInfo(content) {
      let postBody = content;
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling importMultipleContents");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import Multiple Contents
     * Import multiple Contents. If a content same title already exist, it is updated. Otherwise new content is created
     * @param {Array.<module:model/Content>} content 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    importMultipleContents(content) {
      return this.importMultipleContentsWithHttpInfo(content)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes All Content From Collection
     * Deletes all content from collection.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [dry_run = true)] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    resetContentCollectionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'dry_run': opts['dry_run']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/content/reset-collection', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes All Content From Collection
     * Deletes all content from collection.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.dry_run  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    resetContentCollection(opts) {
      return this.resetContentCollectionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Content By Title
     * Update content By title
     * @param {String} title 
     * @param {module:model/Content} content 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Content} and HTTP response
     */
    updateContentByTitleWithHttpInfo(title, content) {
      let postBody = content;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling updateContentByTitle");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling updateContentByTitle");
      }

      let pathParams = {
        'title': title
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Content;
      return this.apiClient.callApi(
        '/v1/content/{title}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Content By Title
     * Update content By title
     * @param {String} title 
     * @param {module:model/Content} content 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Content}
     */
    updateContentByTitle(title, content) {
      return this.updateContentByTitleWithHttpInfo(title, content)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
